{"version":3,"sources":["currency/formatCurrency.ts","budgets/budget-categories.ts","util/budgetAxios.ts","redux/transactions/fetchTransactions.ts","transactions/useTransactionUpdater.ts","saveState/saveState.ts","saveState/InlineSaveState.tsx","transactions/EditableCategory.tsx","transactions/EditableNote.tsx","transactions/splitter/TransactionSplitterRow.tsx","transactions/splitter/TransactionSplitter.tsx","transactions/splitter/useTransactionSplitterUpdater.ts","transactions/TransactionRow.tsx","transactions/TransactionsTable.tsx","redux/useDispatchForAction.ts","transactions/filters/categoryFilter/categoryFilterRedux.ts","transactions/filters/categoryFilter/CategoryFilter.tsx","transactions/filters/dateFilter/dateOptions.ts","transactions/filters/dateFilter/dateFilterRedux.ts","transactions/filters/dateFilter/DateFilter.tsx","transactions/filters/searchFilter/searchFilterRedux.ts","transactions/filters/searchFilter/SearchFilter.tsx","transactions/TransactionFilters.tsx","transactions/filters/categoryFilter/filterByCategory.ts","util/smart-date.ts","transactions/filters/dateFilter/filterByDate.ts","transactions/filters/searchFilter/filterBySearchText.ts","tabs/TransactionTab.tsx","util/firstDate.ts","budgets/getAllMonths.ts","budgets/getOneMonthRange.ts","budgets/budget-allocations.ts","budgets/hasAllocation.ts","budgets/getRemainingAllocation.ts","currency/formatCurrencyAllocation.ts","budgets/BudgetRow.tsx","budgets/getMonthTotal.ts","tabs/BudgetTab.tsx","tabs/InboxTab.tsx","tabs/NavigationTabs.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","index.tsx","redux/configureStore.ts"],"names":["numberFormatExact","Intl","NumberFormat","style","currency","numberFormatRounded","minimumFractionDigits","maximumFractionDigits","formatCurrencyExact","amount","goGreen","formatCurrencyRounded","formatter","text","format","React","createElement","color","budgetCategories","budgetAxios","axios","create","baseURL","fetchTransactions","dispatch","a","get","transactions","normalized","normalizeData","data","type","payload","console","log","flatMap","transaction","splits","map","split","splitIndex","recordId","version","splitId","key","createdAt","parseISO","modifiedAt","postedDate","replace","account","postedDescription","isSplit","length","category","budget","notes","description","SaveState","adaptTransactionToSplit","useTransactionUpdater","useDispatch","useSelector","state","updateTransaction","transactionToUpdate","changes","updateSplits","chain","filter","sortBy","value","update","totalAmount","sumBy","put","InlineSaveState","props","saveState","Fragment","Changed","Saving","CircularProgress","Saved","Error","EditableCategory","row","useState","setCategory","Unchanged","setSaveState","useEffect","Box","display","Select","id","onChange","event","newCategory","target","then","catch","e","flex","minWidth","MenuItem","EditableNote","setNotes","Input","onBlur","newNotes","TransactionSplitterRow","disableAmount","onRemoveButtonClicked","Grid","item","xs","FormControl","disabled","startAdornment","InputAdornment","position","parseFloat","displayEmpty","fullWidth","placeholder","IconButton","onClick","fontSize","TransactionSplitter","originalSplits","setSplits","useTransactionSplitterUpdater","isChanged","some","index","Paper","padding","maxWidth","container","spacing","newSplit","newSplits","oldSplit","push","Math","round","slice","handleOnChange","Button","endIcon","justify","direction","onClose","useStyles","makeStyles","clickableCell","cursor","backgroundColor","TransactionRow","classes","showSplitView","setShowSplitView","handleAmountClicked","TableRow","TableCell","align","className","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","TransactionsTable","page","setPage","rowsPerPage","setRowsPerPage","pagedTransactions","TableContainer","component","Table","TableHead","TableBody","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","useDispatchForAction","action","categoryFilterReducer","categoryFilter","useCategoryFilter","setCategoryFilter","CategoryFilter","InputLabel","labelId","dateOptions","displayName","getRange","start","startOfMonth","Date","end","endOfMonth","subMonths","startOfYear","endOfYear","dateFilterReducer","dateFilter","getDateRange","dateOption","find","option","dateRangeReducer","dateRange","useDateFilter","setDateFilter","DateFilter","searchFilterReducer","searchFilter","useSearchFilter","setSearchFilter","SearchFilter","TransactionFilters","md","filterByCategory","SmartDate","date","dateFns","this","isAfter","isBefore","filterByDate","of","isSameOrAfter","isSameOrBefore","rememberedTokens","lastSearchText","filterBySearchText","searchText","toLowerCase","match","token","includes","toString","TransactionTab","filteredTransactions","reverse","firstDate","getAllMonths","today","months","currentMonth","addMonths","getOneMonthRange","month","budgetAllocations","startDate","hasAllocation","allocation","getRemainingAllocation","spent","valueOf","allocations","endDates","concat","total","i","differenceInMonths","getAllocated","theme","root","width","maxHeight","firstColumn","left","background","borderRight","cell","palette","secondary","main","lighten","light","primary","dark","BudgetRow","selectedMonth","setSelectedMonth","selectedTransactions","maxBy","getAllocation","getTime","aria-checked","isEqual","handleCellClick","getMonthTotal","formatCurrencyAllocation","zIndex","BudgetTab","stickyHeader","InboxTab","NavigationTabs","selectedTab","setSelectedTab","AppBar","Tabs","newValue","Tab","label","App","Boolean","window","location","hostname","rootReducer","store","composedEnhancers","composeWithDevTools","applyMiddleware","thunkMiddleware","createStore","configureStore","ReactDOM","render","StrictMode","rel","href","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.89537dc2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst numberFormatExact = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'});\r\nconst numberFormatRounded = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD', minimumFractionDigits: 0, maximumFractionDigits: 0});\r\n\r\nexport function formatCurrency(amount: number) {\r\n  return numberFormatExact.format(amount)\r\n}\r\n\r\nexport function formatCurrencyExact(amount: number) {\r\n  return goGreen(amount, numberFormatExact);\r\n}\r\n\r\nexport function formatCurrencyRounded(amount: number) {\r\n  return goGreen(amount, numberFormatRounded);\r\n}\r\n\r\nfunction goGreen(amount: number, formatter: Intl.NumberFormat) {\r\n  if (amount < 0) {\r\n    const text = formatter.format(-amount);\r\n    return React.createElement('div', { style: { color: 'green' } }, `+${text}`);\r\n  }\r\n  return formatter.format(amount);\r\n}","export const budgetCategories = [\r\n  'Richie',\r\n  'Stef',\r\n  'Kids',\r\n  'Clothes',\r\n  'Groceries',\r\n  'Entertainment',\r\n  'Home Supplies',\r\n  'Home repair and renovations',\r\n  'Healthcare',\r\n  'Car maintenance',\r\n  'Petcare',\r\n  'Gifts',\r\n  'Big Necessities',\r\n  'Optional Important',\r\n  'Travel',\r\n  'Christmas',\r\n  'Charity',\r\n  'Richie Projects',\r\n  'To be determined',\r\n  'Work Expenses',\r\n  'Gas',\r\n  'Income',\r\n  'Transfer',\r\n  'Mortgage',\r\n  'Home insurance',\r\n  'Car insurance',\r\n  'Student Loan',\r\n  'Subscriptions',\r\n  'Utilities',\r\n];\r\n","import axios from \"axios\";\r\n\r\nexport const budgetAxios = axios.create({\r\n  baseURL: 'http://homelab.local:3000',\r\n});\r\n","import {Dispatch} from \"redux\";\r\nimport {parseISO} from 'date-fns';\r\nimport {Transaction} from \"../../transactions/transactionModel\";\r\nimport {budgetAxios} from \"../../util/budgetAxios\";\r\n\r\ntype ApiTransactionSplit = {\r\n  amount: number,\r\n  budget: string,\r\n  description: string\r\n}\r\n\r\ntype ApiTransaction = {\r\n  recordId: number,\r\n  version: number,\r\n  createdAt: string, // \"2019-07-02T00:00:00.000Z\"\r\n  modifiedAt: string, // \"2019-07-02T00:00:00.000Z\"\r\n  account: string, //\"Checking\",\r\n  pending: boolean,\r\n  plaidId: string, // \"qDwqpr3Re9tMx6bMQVk1hwxEVKPVRauJXPzBz\",\r\n  postedDate: string, // \"2019-07-02T00:00:00.000Z\"\r\n  postedDescription: string,\r\n  splits: ApiTransactionSplit[],\r\n  totalAmount: number,\r\n}\r\n\r\nexport const fetchTransactions = () => {\r\n  return async (dispatch: Dispatch<any>) => {\r\n    try {\r\n      const transactions = await budgetAxios.get('/transactions');\r\n      const normalized = normalizeData(transactions.data);\r\n      dispatch({\r\n        type: 'FETCH_TRANSACTIONS_SUCCESS',\r\n        payload: normalized,\r\n      });\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n};\r\n\r\nfunction normalizeData(transactions: ApiTransaction[]): Transaction[] {\r\n  return transactions.flatMap(transaction => {\r\n    return transaction.splits.map((split, splitIndex) => ({\r\n      recordId: transaction.recordId,\r\n      version: transaction.version,\r\n      splitId: splitIndex,\r\n      key: `${transaction.recordId}:${splitIndex}`,\r\n      createdAt: parseISO(transaction.createdAt),\r\n      modifiedAt: parseISO(transaction.modifiedAt),\r\n      postedDate: parseISO(transaction.postedDate.replace(/T.+/, '')),\r\n      account: transaction.account,\r\n      postedDescription: transaction.postedDescription,\r\n      isSplit: transaction.splits.length > 1,\r\n      amount: split.amount,\r\n      category: split.budget,\r\n      notes: split.description,\r\n    }));\r\n  });\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {Transaction} from \"./transactionModel\";\r\nimport {chain, sumBy} from \"lodash\";\r\nimport {budgetAxios} from \"../util/budgetAxios\";\r\nimport {fetchTransactions} from \"../redux/transactions/fetchTransactions\";\r\n\r\ntype ApiUpdateTransactionSplit = {\r\n  amount: number,\r\n  budget: string,\r\n  description: string,\r\n}\r\n\r\ntype ApiUpdateTransaction = {\r\n  recordId: number,\r\n  version: number,\r\n  totalAmount: number,\r\n  splits: ApiUpdateTransactionSplit[],\r\n}\r\n\r\nconst adaptTransactionToSplit = (transaction: Transaction): ApiUpdateTransactionSplit => {\r\n  return {\r\n    amount: transaction.amount,\r\n    budget: transaction.category,\r\n    description: transaction.notes,\r\n  }\r\n};\r\n\r\nexport const useTransactionUpdater = () => {\r\n  const dispatch = useDispatch();\r\n  const transactions = useSelector((state: any) => state.transactions) as Transaction[];\r\n\r\n  return {\r\n    updateTransaction: async (transactionToUpdate: Transaction, changes: Partial<Transaction>) => {\r\n      const updateSplits = chain(transactions)\r\n        .filter(transaction => transaction.recordId === transactionToUpdate.recordId)\r\n        .sortBy(transaction => transaction.splitId)\r\n        .map(transaction => (transaction.splitId === transactionToUpdate.splitId) ? {...transaction, ...changes} : transaction)\r\n        .map(transaction => adaptTransactionToSplit(transaction))\r\n        .value();\r\n\r\n      const update: ApiUpdateTransaction = {\r\n        recordId: transactionToUpdate.recordId,\r\n        version: transactionToUpdate.version,\r\n        totalAmount: sumBy(updateSplits, split => split.amount),\r\n        splits: updateSplits,\r\n      };\r\n\r\n      await budgetAxios.put(`/transactions/${update.recordId}`, update);\r\n      dispatch(fetchTransactions());\r\n    }\r\n  }\r\n};\r\n","export enum SaveState {\r\n  Unchanged,\r\n  Changed,\r\n  Saving,\r\n  Saved,\r\n  Error,\r\n}\r\n","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {SaveState} from \"./saveState\";\r\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ReportOutlinedIcon from '@material-ui/icons/ReportOutlined';\r\n\r\nexport function InlineSaveState(props: { saveState: SaveState }) {\r\n  const saveState = props.saveState;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {saveState === SaveState.Changed && (<EditIcon/>)}\r\n      {saveState === SaveState.Saving && (<CircularProgress/>)}\r\n      {saveState === SaveState.Saved && (<CheckCircleOutlinedIcon/>)}\r\n      {saveState === SaveState.Error && (<ReportOutlinedIcon/>)}\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import {Box, MenuItem, Select} from \"@material-ui/core\";\r\nimport {budgetCategories} from \"../budgets/budget-categories\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Transaction} from \"./transactionModel\";\r\nimport {useTransactionUpdater} from \"./useTransactionUpdater\";\r\nimport {InlineSaveState} from \"../saveState/InlineSaveState\";\r\nimport {SaveState} from \"../saveState/saveState\";\r\n\r\nexport function EditableCategory(props: { row: Transaction }) {\r\n  const row = props.row;\r\n  const [category, setCategory] = useState(row.category);\r\n  const [saveState, setSaveState] = useState<SaveState>(SaveState.Unchanged);\r\n  const {updateTransaction} = useTransactionUpdater();\r\n\r\n  useEffect(() => setCategory(row.category), [row.category]);\r\n\r\n  function handleChange(event: React.ChangeEvent<{ name?: string; value: unknown }>) {\r\n    const newCategory = event.target.value as string;\r\n    setCategory(newCategory);\r\n    if (newCategory !== row.category) {\r\n      setSaveState(SaveState.Saving);\r\n      updateTransaction(row, {category: newCategory})\r\n        .then(() => setSaveState(SaveState.Saved))\r\n        .catch(e => {\r\n          console.log(e);\r\n          setSaveState(SaveState.Error)\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box style={{display: 'flex'}}>\r\n      <Select\r\n        id=\"edit-category-select\"\r\n        value={category}\r\n        onChange={handleChange}\r\n        style={{flex: 1, minWidth: 120}}\r\n      >\r\n        {budgetCategories.map(category => (\r\n          <MenuItem key={category} value={category}>{category}</MenuItem>\r\n        ))}\r\n      </Select>\r\n      <InlineSaveState saveState={saveState}/>\r\n    </Box>\r\n  )\r\n}\r\n","import {Box, Input} from \"@material-ui/core\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Transaction} from \"./transactionModel\";\r\nimport {useTransactionUpdater} from \"./useTransactionUpdater\";\r\nimport {SaveState} from \"../saveState/saveState\";\r\nimport {InlineSaveState} from \"../saveState/InlineSaveState\";\r\n\r\nexport function EditableNote(props: { row: Transaction }) {\r\n  const row = props.row;\r\n  const [notes, setNotes] = useState(row.notes);\r\n  const [saveState, setSaveState] = useState<SaveState>(SaveState.Unchanged);\r\n  const {updateTransaction} = useTransactionUpdater();\r\n\r\n  useEffect(() => setNotes(row.notes), [row.notes]);\r\n\r\n  function handleChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\r\n    const newNotes = event.target.value as string;\r\n    setNotes(newNotes);\r\n    setSaveState(newNotes !== row.notes ? SaveState.Changed : SaveState.Unchanged);\r\n  }\r\n\r\n  function handleBlur() {\r\n    if (notes === row.notes) {\r\n      return;\r\n    }\r\n    setSaveState(SaveState.Saving);\r\n\r\n    updateTransaction(row, {notes})\r\n      .then(() => setSaveState(SaveState.Saved))\r\n      .catch(e => {\r\n        console.log(e);\r\n        setSaveState(SaveState.Error)\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Box style={{display: 'flex'}}>\r\n      <Input\r\n        value={notes}\r\n        onBlur={handleBlur}\r\n        onChange={handleChange}\r\n        style={{flex: 1, minWidth: 120}}\r\n      />\r\n      <InlineSaveState saveState={saveState}/>\r\n    </Box>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport {FormControl, Grid, IconButton, Input, InputAdornment, MenuItem, Select} from \"@material-ui/core\";\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport {Split} from \"./split\";\r\nimport {budgetCategories} from \"../../budgets/budget-categories\";\r\n\r\nexport function TransactionSplitterRow(props: {\r\n  split: Split,\r\n  disableAmount: boolean,\r\n  onChange: (newSplit: Split) => void,\r\n  onRemoveButtonClicked: () => void,\r\n}) {\r\n  const {split, disableAmount, onChange, onRemoveButtonClicked} = props;\r\n\r\n  const handleAmountChanged = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    onChange({...split, amount: parseFloat(event.target.value)});\r\n  };\r\n\r\n  const handleCategoryChanged = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n    onChange({...split, category: event.target.value as string});\r\n  };\r\n\r\n  const handleNotesChanged = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    onChange({...split, notes: event.target.value});\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid item xs={2}>\r\n        <FormControl>\r\n          <Input\r\n            type=\"number\"\r\n            value={split.amount}\r\n            disabled={disableAmount}\r\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\r\n            onChange={handleAmountChanged}\r\n          />\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Select\r\n          id=\"edit-category-select\"\r\n          value={split.category}\r\n          onChange={handleCategoryChanged}\r\n          displayEmpty\r\n          fullWidth\r\n          style={{minWidth: 120}}\r\n        >\r\n          <MenuItem key=\"\" value=\"\" disabled>\r\n            <span style={{color: 'rgba(0, 0, 0, 0.26)'}}>Category</span>\r\n          </MenuItem>\r\n          {budgetCategories.map(category => (\r\n            <MenuItem key={category} value={category}>{category}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </Grid>\r\n      <Grid item xs={5}>\r\n        <Input\r\n          value={split.notes}\r\n          onChange={handleNotesChanged}\r\n          placeholder=\"Notes\"\r\n          fullWidth\r\n          style={{minWidth: 120}}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={1}>\r\n        <IconButton\r\n          disabled={disableAmount}\r\n          color=\"secondary\"\r\n          onClick={() => onRemoveButtonClicked()}\r\n        >\r\n          <RemoveCircleOutlineIcon fontSize=\"inherit\"/>\r\n        </IconButton>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {Button, Grid, Paper} from \"@material-ui/core\";\r\nimport {Transaction} from \"../transactionModel\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {chain, sumBy} from \"lodash\";\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport {Split} from \"./split\";\r\nimport {TransactionSplitterRow} from \"./TransactionSplitterRow\";\r\nimport {SaveState} from \"../../saveState/saveState\";\r\nimport {useTransactionSplitterUpdater} from \"./useTransactionSplitterUpdater\";\r\nimport {InlineSaveState} from \"../../saveState/InlineSaveState\";\r\nimport {formatCurrencyExact} from \"../../currency/formatCurrency\";\r\n\r\nexport function TransactionSplitter(props: {\r\n  row: Transaction,\r\n  onClose: () => void,\r\n}) {\r\n  const row = props.row;\r\n  const transactions = useSelector((state: any) => state.transactions) as Transaction[];\r\n  const originalSplits = chain(transactions)\r\n    .filter(transaction => transaction.recordId === row.recordId)\r\n    .sortBy(transaction => transaction.splitId)\r\n    .map(transaction => ({\r\n      category: transaction.category,\r\n      amount: transaction.amount,\r\n      notes: transaction.notes,\r\n    } as Split))\r\n    .value();\r\n  const [splits, setSplits] = useState(originalSplits);\r\n  const [saveState, setSaveState] = useState<SaveState>(SaveState.Unchanged);\r\n  const {updateTransaction} = useTransactionSplitterUpdater();\r\n\r\n  const handleSplitButtonClicked = () => {\r\n    setSplits([...splits, {\r\n      category: splits[0].category,\r\n      amount: 0.00,\r\n      notes: '',\r\n    }]);\r\n  };\r\n\r\n  const handleRemoveButtonClicked = (splitIndex: number) => {\r\n    setSplits([\r\n      {\r\n        ...splits[0],\r\n        amount: Math.round((splits[0].amount + (splits[splitIndex].amount || 0)) * 100) / 100,\r\n      },\r\n      ...splits.slice(1, splitIndex),\r\n      ...splits.slice(splitIndex + 1),\r\n    ]);\r\n  };\r\n\r\n  const handleOnChange = (newSplit: Split, splitIndex: number) => {\r\n    const newSplits = [];\r\n    const oldSplit = splits[splitIndex];\r\n    if (splitIndex !== 0) {\r\n      newSplits.push({\r\n        category: splits[0].category,\r\n        amount: Math.round((splits[0].amount + (oldSplit.amount || 0) - (newSplit.amount || 0)) * 100) / 100,\r\n        notes: splits[0].notes,\r\n      })\r\n    }\r\n    setSplits([\r\n      ...newSplits,\r\n      ...splits.slice(1, splitIndex),\r\n      {\r\n        category: newSplit.category,\r\n        amount: newSplit.amount,\r\n        notes: newSplit.notes,\r\n      },\r\n      ...splits.slice(splitIndex + 1),\r\n    ]);\r\n  };\r\n\r\n  const isChanged = splits.length !== originalSplits.length ? true :\r\n    splits.some((split, index) => split.amount !== originalSplits[index].amount\r\n      || split.notes !== originalSplits[index].notes\r\n      || split.category !== originalSplits[index].category\r\n    );\r\n\r\n  const handleSaveButtonClicked = () => {\r\n    setSaveState(SaveState.Saving);\r\n\r\n    updateTransaction(row, splits)\r\n      .then(() => setSaveState(SaveState.Saved))\r\n      .then(() => props.onClose())\r\n      .catch(e => {\r\n        console.log(e);\r\n        setSaveState(SaveState.Error)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Paper style={{padding: '16px', maxWidth: \"640px\"}}>\r\n      <Grid container spacing={2}>\r\n        {splits.map((split, index) => (\r\n          <TransactionSplitterRow\r\n            key={index}\r\n            split={split}\r\n            disableAmount={index === 0}\r\n            onChange={(newSplit) => handleOnChange(newSplit, index)}\r\n            onRemoveButtonClicked={() => handleRemoveButtonClicked(index)}\r\n          />\r\n        ))}\r\n        {splits.length > 1 && (\r\n          <Grid item xs={12}>\r\n            <em>{formatCurrencyExact(sumBy(splits, split => split.amount))} total</em>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={6}>\r\n          <Button\r\n            color=\"primary\"\r\n            endIcon={<CallSplitIcon/>}\r\n            onClick={() => handleSplitButtonClicked()}\r\n          >\r\n            Split\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6} container justify=\"flex-end\" spacing={2} direction=\"row\">\r\n          <Grid item>\r\n            <Button\r\n              onClick={() => props.onClose()}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              color=\"primary\"\r\n              disabled={!isChanged}\r\n              onClick={() => handleSaveButtonClicked()}\r\n            >\r\n              Save\r\n            </Button>\r\n            <InlineSaveState saveState={saveState}/>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {Transaction} from \"../transactionModel\";\r\nimport {sumBy} from \"lodash\";\r\nimport {budgetAxios} from \"../../util/budgetAxios\";\r\nimport {fetchTransactions} from \"../../redux/transactions/fetchTransactions\";\r\nimport {Split} from \"./split\";\r\n\r\ntype ApiUpdateTransactionSplit = {\r\n  amount: number,\r\n  budget: string,\r\n  description: string,\r\n}\r\n\r\ntype ApiUpdateTransaction = {\r\n  recordId: number,\r\n  version: number,\r\n  totalAmount: number,\r\n  splits: ApiUpdateTransactionSplit[],\r\n}\r\n\r\nexport const useTransactionSplitterUpdater = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return {\r\n    updateTransaction: async (transactionToUpdate: Transaction, splits: Split[]) => {\r\n      const updateSplits = splits.map(split => ({\r\n        amount: split.amount,\r\n        budget: split.category,\r\n        description: split.notes,\r\n      }));\r\n\r\n      const update: ApiUpdateTransaction = {\r\n        recordId: transactionToUpdate.recordId,\r\n        version: transactionToUpdate.version,\r\n        totalAmount: sumBy(updateSplits, split => split.amount),\r\n        splits: updateSplits,\r\n      };\r\n\r\n      await budgetAxios.put(`/transactions/${update.recordId}`, update);\r\n      dispatch(fetchTransactions());\r\n    }\r\n  }\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {Collapse, TableCell} from \"@material-ui/core\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {format} from 'date-fns';\r\nimport {Transaction} from \"./transactionModel\";\r\nimport {formatCurrencyExact} from \"../currency/formatCurrency\";\r\nimport {EditableCategory} from \"./EditableCategory\";\r\nimport {EditableNote} from \"./EditableNote\";\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {TransactionSplitter} from \"./splitter/TransactionSplitter\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  clickableCell: {\r\n    cursor: 'pointer',\r\n    \"&:hover\": {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.04)',\r\n    },\r\n  },\r\n}));\r\n\r\nexport function TransactionRow(props: { row: Transaction }) {\r\n  const row = props.row;\r\n  const classes = useStyles();\r\n  const [showSplitView, setShowSplitView] = useState(false);\r\n\r\n  const handleAmountClicked = () => {\r\n    setShowSplitView(!showSplitView);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow>\r\n        <TableCell>{format(row.postedDate, 'MMM dd, yyyy')}</TableCell>\r\n        <TableCell\r\n          align=\"right\"\r\n          className={classes.clickableCell}\r\n          onClick={() => handleAmountClicked()}\r\n        >\r\n          {row.isSplit && (<CallSplitIcon fontSize=\"inherit\"/>)}\r\n          {formatCurrencyExact(row.amount)}\r\n        </TableCell>\r\n        <TableCell><EditableCategory row={row}/></TableCell>\r\n        <TableCell>{row.postedDescription}</TableCell>\r\n        <TableCell><EditableNote row={row}/></TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={showSplitView ? {} : {paddingBottom: 0, paddingTop: 0}} colSpan={13}>\r\n          <Collapse in={showSplitView} timeout=\"auto\" unmountOnExit>\r\n            <TransactionSplitter row={row} onClose={() => handleAmountClicked()}/>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {TableCell, TablePagination} from \"@material-ui/core\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport {Transaction} from \"./transactionModel\";\r\nimport {TransactionRow} from \"./TransactionRow\";\r\n\r\nexport function TransactionsTable(props: { transactions: Transaction[] }) {\r\n  const transactions = props.transactions;\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const pagedTransactions = transactions.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\r\n\r\n  return (\r\n    <div>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Date</TableCell>\r\n              <TableCell align=\"right\">Amount</TableCell>\r\n              <TableCell>Category</TableCell>\r\n              <TableCell>Description</TableCell>\r\n              <TableCell>Notes</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {pagedTransactions.map((row: Transaction) => (<TransactionRow key={row.key} row={row}/>))}\r\n            {pagedTransactions.length === 0 && (\r\n              <TableRow>\r\n                <TableCell colSpan={5}><em>No transactions found.</em></TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 100, 1000, 10000]}\r\n        component=\"div\"\r\n        count={transactions.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\n\r\nexport const useDispatchForAction = <T>(action: string) => {\r\n  const dispatch = useDispatch();\r\n  return (payload: T) => {\r\n    dispatch({\r\n      type: action,\r\n      payload\r\n    })\r\n  }\r\n};\r\n","import {useSelector} from \"react-redux\";\r\nimport {useDispatchForAction} from \"../../../redux/useDispatchForAction\";\r\n\r\nconst SET_CATEGORY_FILTER_ACTION = 'SET_CATEGORY_FILTER';\r\n\r\nexport const categoryFilterReducer = (state: any = {}, action: any) => {\r\n  if (action.type === SET_CATEGORY_FILTER_ACTION) {\r\n    return action.payload;\r\n  }\r\n  return state.categoryFilter || 'All Categories';\r\n};\r\n\r\nexport const useCategoryFilter = () => {\r\n  return {\r\n    categoryFilter: useSelector((state: any) => state.categoryFilter),\r\n    setCategoryFilter: useDispatchForAction(SET_CATEGORY_FILTER_ACTION)\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport {budgetCategories} from \"../../../budgets/budget-categories\";\r\nimport {useCategoryFilter} from \"./categoryFilterRedux\";\r\n\r\nexport function CategoryFilter() {\r\n  const {categoryFilter, setCategoryFilter} = useCategoryFilter();\r\n\r\n  function handleChange(event: React.ChangeEvent<{ name?: string; value: unknown }>) {\r\n    setCategoryFilter(event.target.value as string);\r\n  }\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"category-filter-label\">Category</InputLabel>\r\n      <Select\r\n        labelId=\"category-filter-label\"\r\n        id=\"category-filter-select\"\r\n        value={categoryFilter}\r\n        onChange={handleChange}\r\n        fullWidth\r\n      >\r\n        <MenuItem key=\"All Categories\" value=\"All Categories\">All Categories</MenuItem>\r\n        {budgetCategories.map(category => (\r\n          <MenuItem key={category} value={category}>{category}</MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import {endOfMonth, endOfYear, startOfMonth, startOfYear, subMonths} from \"date-fns\";\r\n\r\nexport type DateRange = {\r\n  start: Date,\r\n  end: Date,\r\n}\r\n\r\nexport type DateOption = {\r\n  id: string,\r\n  displayName: string,\r\n  getRange: () => DateRange\r\n}\r\n\r\nexport const dateOptions: DateOption[] = [\r\n  {\r\n    id: 'thisMonth',\r\n    displayName: 'This month',\r\n    getRange: () => ({\r\n      start: startOfMonth(new Date()),\r\n      end: endOfMonth(new Date()),\r\n    })\r\n  },\r\n  {\r\n    id: 'lastMonth',\r\n    displayName: 'Last month',\r\n    getRange: () => ({\r\n      start: startOfMonth(subMonths(new Date(), 1)),\r\n      end: endOfMonth(subMonths(new Date(), 1)),\r\n    })\r\n  },\r\n  {\r\n    id: 'thisYear',\r\n    displayName: 'This year',\r\n    getRange: () => ({\r\n      start: startOfYear(new Date()),\r\n      end: endOfYear(new Date()),\r\n    })\r\n  },\r\n  {\r\n    id: 'allTime',\r\n    displayName: 'All Time',\r\n    getRange: () => ({\r\n      start: new Date(0),\r\n      end: new Date(3000, 0, 1),\r\n    })\r\n  },\r\n];\r\n","import {useSelector} from \"react-redux\";\r\nimport {useDispatchForAction} from \"../../../redux/useDispatchForAction\";\r\nimport {dateOptions, DateRange} from \"./dateOptions\";\r\n\r\nconst SET_DATE_FILTER_ACTION = 'SET_DATE_FILTER';\r\nconst DEFAULT_DATE_FILTER = 'allTime';\r\n\r\nexport const dateFilterReducer = (state: any = {}, action: any) => {\r\n  if (action.type === SET_DATE_FILTER_ACTION) {\r\n    return action.payload;\r\n  }\r\n  return state.dateFilter || DEFAULT_DATE_FILTER;\r\n};\r\n\r\nconst getDateRange = (id: string) => {\r\n  const dateOption = dateOptions.find(option => option.id === id);\r\n  if (!dateOption) {\r\n    throw new Error(`Date option not found for '${id}'`);\r\n  }\r\n  return dateOption.getRange();\r\n};\r\n\r\nexport const dateRangeReducer = (state: any = {}, action: any) => {\r\n  if (action.type === SET_DATE_FILTER_ACTION) {\r\n    return getDateRange(action.payload);\r\n  }\r\n  return state.dateRange || getDateRange(DEFAULT_DATE_FILTER);\r\n};\r\n\r\nexport const useDateFilter = () => {\r\n  return {\r\n    dateFilter: useSelector((state: any) => state.dateFilter),\r\n    dateRange: useSelector((state: any) => state.dateRange) as DateRange,\r\n    setDateFilter: useDispatchForAction(SET_DATE_FILTER_ACTION)\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport {useDateFilter} from \"./dateFilterRedux\";\r\nimport {dateOptions} from \"./dateOptions\";\r\n\r\nexport function DateFilter() {\r\n  const {dateFilter, setDateFilter} = useDateFilter();\r\n\r\n  function handleChange(event: React.ChangeEvent<{ name?: string; value: unknown }>) {\r\n    setDateFilter(event.target.value as string);\r\n  }\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"date-filter-label\">Date Range</InputLabel>\r\n      <Select\r\n        labelId=\"date-filter-label\"\r\n        id=\"date-filter-select\"\r\n        value={dateFilter}\r\n        onChange={handleChange}\r\n        fullWidth\r\n      >\r\n        {dateOptions.map(option => (\r\n          <MenuItem key={option.id} value={option.id}>{option.displayName}</MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import {useSelector} from \"react-redux\";\r\nimport {useDispatchForAction} from \"../../../redux/useDispatchForAction\";\r\n\r\nconst SET_SEARCH_FILTER_ACTION = 'SET_SEARCH_FILTER';\r\n\r\nexport const searchFilterReducer = (state: any = {}, action: any) => {\r\n  if (action.type === SET_SEARCH_FILTER_ACTION) {\r\n    return action.payload;\r\n  }\r\n  return state.searchFilter || '';\r\n};\r\n\r\nexport const useSearchFilter = () => {\r\n  return {\r\n    searchFilter: useSelector((state: any) => state.searchFilter),\r\n    setSearchFilter: useDispatchForAction(SET_SEARCH_FILTER_ACTION)\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {FormControl, Input, InputLabel} from \"@material-ui/core\";\r\nimport {useSearchFilter} from \"./searchFilterRedux\";\r\n\r\nexport function SearchFilter() {\r\n  const {searchFilter, setSearchFilter} = useSearchFilter();\r\n\r\n  function handleChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\r\n    setSearchFilter(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"search-filter-label\">Search</InputLabel>\r\n      <Input\r\n        id=\"search-filter-select\"\r\n        value={searchFilter}\r\n        onChange={handleChange}\r\n        fullWidth\r\n      />\r\n    </FormControl>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {CategoryFilter} from \"./filters/categoryFilter/CategoryFilter\";\r\nimport {DateFilter} from \"./filters/dateFilter/DateFilter\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {SearchFilter} from \"./filters/searchFilter/SearchFilter\";\r\n\r\nexport function TransactionFilters() {\r\n  return (\r\n    <Grid container spacing={4}>\r\n      <Grid item xs={4} md={2}>\r\n        <CategoryFilter/>\r\n      </Grid>\r\n      <Grid item xs={4} md={2}>\r\n        <DateFilter/>\r\n      </Grid>\r\n      <Grid item xs={4} md={2}>\r\n        <SearchFilter/>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import {Transaction} from \"../../transactionModel\";\r\n\r\nexport const filterByCategory = (transaction: Transaction, category: string) => {\r\n  if (category === 'All Categories') {\r\n    return true;\r\n  }\r\n  if (category === 'To be determined' && !transaction.category) {\r\n    return true;\r\n  }\r\n  return transaction.category === category;\r\n};\r\n","import * as dateFns from \"date-fns\";\r\n\r\nexport class SmartDate {\r\n  constructor(private date: Date) {}\r\n\r\n  static of(date: Date) {\r\n    return new SmartDate(date);\r\n  }\r\n\r\n  isBefore(date: Date) {\r\n    return dateFns.isBefore(this.date, date);\r\n  }\r\n\r\n  isAfter(date: Date) {\r\n    return dateFns.isAfter(this.date, date);\r\n  }\r\n\r\n  isSameOrBefore(date: Date) {\r\n    return !this.isAfter(date);\r\n  }\r\n\r\n  isSameOrAfter(date: Date) {\r\n    return !this.isBefore(date);\r\n  }\r\n}\r\n","import {Transaction} from \"../../transactionModel\";\r\nimport {DateRange} from \"./dateOptions\";\r\nimport {SmartDate} from \"../../../util/smart-date\";\r\n\r\nexport const filterByDate = (transaction: Transaction, dateRange: DateRange) => {\r\n  const postedDate = SmartDate.of(transaction.postedDate);\r\n  return postedDate.isSameOrAfter(dateRange.start) && postedDate.isSameOrBefore(dateRange.end);\r\n};\r\n","import {Transaction} from \"../../transactionModel\";\r\nimport {formatCurrency} from \"../../../currency/formatCurrency\";\r\n\r\nlet rememberedTokens: string[] = [];\r\nlet lastSearchText = '';\r\n\r\nexport const filterBySearchText = (transaction: Transaction, searchText: string): boolean => {\r\n  if (!searchText) {\r\n    return true;\r\n  }\r\n  if (searchText !== lastSearchText) {\r\n    lastSearchText = searchText;\r\n    rememberedTokens = splitByWordOrQuotes(lastSearchText.toLowerCase());\r\n  }\r\n  return rememberedTokens\r\n    .filter(token => !!token)\r\n    .some(token => (transaction.postedDescription || '').toLowerCase().includes(token)\r\n      || (transaction.notes || '').toLowerCase().includes(token)\r\n      || formatCurrency(transaction.amount).toString().includes(token));\r\n};\r\n\r\nfunction splitByWordOrQuotes(text: string): string[] {\r\n  return (text.match(/([\\w.]+)|\"([^\"]+)\"/g) || [])\r\n    .map(token => token.replace(/^\"(.*)\"$/, '$1'))\r\n}\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {chain} from 'lodash';\r\nimport {TransactionsTable} from \"../transactions/TransactionsTable\";\r\nimport {TransactionFilters} from \"../transactions/TransactionFilters\";\r\nimport {Transaction} from \"../transactions/transactionModel\";\r\nimport {useCategoryFilter} from \"../transactions/filters/categoryFilter/categoryFilterRedux\";\r\nimport {filterByCategory} from \"../transactions/filters/categoryFilter/filterByCategory\";\r\nimport {useDateFilter} from \"../transactions/filters/dateFilter/dateFilterRedux\";\r\nimport {filterByDate} from \"../transactions/filters/dateFilter/filterByDate\";\r\nimport {filterBySearchText} from \"../transactions/filters/searchFilter/filterBySearchText\";\r\nimport {useSearchFilter} from \"../transactions/filters/searchFilter/searchFilterRedux\";\r\n\r\nexport function TransactionTab() {\r\n  const {categoryFilter} = useCategoryFilter();\r\n  const {dateRange} = useDateFilter();\r\n  const {searchFilter} = useSearchFilter();\r\n  const transactions = useSelector((state: any) => state.transactions) as Transaction[];\r\n  const filteredTransactions = chain(transactions)\r\n    .filter(transaction => filterByCategory(transaction, categoryFilter))\r\n    .filter(transaction => filterByDate(transaction, dateRange))\r\n    .filter(transaction => filterBySearchText(transaction, searchFilter))\r\n    .sortBy(transaction => transaction.postedDate)\r\n    .reverse()\r\n    .value();\r\n\r\n  return (\r\n    <div>\r\n      <TransactionFilters/>\r\n      <TransactionsTable transactions={filteredTransactions}/>\r\n    </div>\r\n  );\r\n}\r\n","export const firstDate = new Date(2018, 8, 1);\r\n","import {addMonths} from \"date-fns\";\r\nimport {firstDate} from \"../util/firstDate\";\r\n\r\nexport function getAllMonths(): Date[] {\r\n  const today = new Date();\r\n\r\n  const months = [];\r\n  let currentMonth = firstDate;\r\n  while (currentMonth <= today) {\r\n    months.push(currentMonth);\r\n    currentMonth = addMonths(currentMonth, 1);\r\n  }\r\n  return months;\r\n}\r\n","import {DateRange} from \"../transactions/filters/dateFilter/dateOptions\";\r\nimport {endOfMonth, startOfMonth} from \"date-fns\";\r\n\r\nexport const getOneMonthRange = (month: Date): DateRange => {\r\n  return {\r\n    start: startOfMonth(month),\r\n    end: endOfMonth(month),\r\n  };\r\n};\r\n","import {firstDate} from \"../util/firstDate\";\r\n\r\nexport type BudgetAllocation = {\r\n  category: string,\r\n  amount: number,\r\n  startDate: Date,\r\n}\r\n\r\nexport const budgetAllocations: BudgetAllocation[] = [\r\n  {\r\n    category: 'Clothes',\r\n    amount: 70,\r\n    startDate: firstDate,\r\n  },\r\n  {\r\n    category: 'Groceries',\r\n    amount: 400,\r\n    startDate: firstDate,\r\n  },\r\n  {\r\n    category: 'Entertainment',\r\n    amount: 150,\r\n    startDate: firstDate,\r\n  },\r\n  {\r\n    category: 'Richie',\r\n    amount: 120,\r\n    startDate: firstDate,\r\n  },\r\n  {\r\n    category: 'Richie',\r\n    amount: 150,\r\n    startDate: new Date(2020, 0, 1),\r\n  },\r\n  {\r\n    category: 'Stef',\r\n    amount: 120,\r\n    startDate: firstDate,\r\n  },\r\n  {\r\n    category: 'Stef',\r\n    amount: 150,\r\n    startDate: new Date(2020, 0, 1),\r\n  },\r\n];\r\n","import {budgetAllocations} from \"./budget-allocations\";\r\nimport { chain } from \"lodash\";\r\n\r\nexport function hasAllocation(category: string) {\r\n  return budgetAllocations.some(allocation => allocation.category === category);\r\n}\r\n\r\nexport function getAllocation(category: string) {\r\n  return chain(budgetAllocations)\r\n    .filter(allocation => allocation.category === category)\r\n    .maxBy(allocation => allocation.startDate)\r\n    .value()\r\n    .amount;\r\n}\r\n","import {Transaction} from \"../transactions/transactionModel\";\r\nimport {DateRange} from \"../transactions/filters/dateFilter/dateOptions\";\r\nimport {differenceInMonths, endOfMonth, subMonths} from \"date-fns\";\r\nimport {chain} from \"lodash\";\r\nimport {filterByCategory} from \"../transactions/filters/categoryFilter/filterByCategory\";\r\nimport {filterByDate} from \"../transactions/filters/dateFilter/filterByDate\";\r\nimport {firstDate} from \"../util/firstDate\";\r\nimport {budgetAllocations} from \"./budget-allocations\";\r\n\r\nexport function getAllocated(category: string, month: Date) {\r\n  const allocations = chain(budgetAllocations)\r\n    .filter(allocation => allocation.category === category)\r\n    .filter(allocation => allocation.startDate <= month)\r\n    .sortBy(allocation => allocation.startDate)\r\n    .value();\r\n\r\n  let endDates = allocations\r\n    .slice(1)\r\n    .map(allocation => subMonths(allocation.startDate, 1))\r\n    .concat([month]);\r\n\r\n  let total = 0;\r\n  for (let i = 0; i < allocations.length; i++) {\r\n    const monthCount = differenceInMonths(endDates[i], allocations[i].startDate) + 1;\r\n    total += monthCount * allocations[i].amount;\r\n  }\r\n  return total;\r\n}\r\n\r\nexport function getRemainingAllocation(transactions: Transaction[], category: string, month: Date) {\r\n  const dateRange: DateRange = {\r\n    start: firstDate,\r\n    end: endOfMonth(month),\r\n  };\r\n\r\n  const spent = chain(transactions)\r\n    .filter(transaction => filterByCategory(transaction, category))\r\n    .filter(transaction => filterByDate(transaction, dateRange))\r\n    .sumBy(transaction => transaction.amount)\r\n    .valueOf();\r\n\r\n  const allocated = getAllocated(category, month);\r\n  return allocated - spent;\r\n}\r\n","import React from \"react\";\r\n\r\nconst numberFormatRounded = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD', minimumFractionDigits: 0, maximumFractionDigits: 0});\r\n\r\nexport function formatCurrencyAllocation(amount: number) {\r\n  if (amount < 0) {\r\n    const text = numberFormatRounded.format(-amount);\r\n    return React.createElement('div', { style: { color: 'red' } }, `${text} over`);\r\n  }\r\n  return `${numberFormatRounded.format(amount)} left`;\r\n}\r\n","import React, {useState} from \"react\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {Collapse, lighten, TableCell} from \"@material-ui/core\";\r\nimport {getAllMonths} from \"./getAllMonths\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Transaction} from \"../transactions/transactionModel\";\r\nimport {getMonthTotal} from \"./getMonthTotal\";\r\nimport {getAllocation, hasAllocation} from \"./hasAllocation\";\r\nimport {getRemainingAllocation} from \"./getRemainingAllocation\";\r\nimport {formatCurrencyRounded} from \"../currency/formatCurrency\";\r\nimport {TransactionsTable} from \"../transactions/TransactionsTable\";\r\nimport {filterByDate} from \"../transactions/filters/dateFilter/filterByDate\";\r\nimport {filterByCategory} from \"../transactions/filters/categoryFilter/filterByCategory\";\r\nimport {getOneMonthRange} from \"./getOneMonthRange\";\r\nimport {chain} from \"lodash\";\r\nimport {isEqual} from \"date-fns\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {formatCurrencyAllocation} from \"../currency/formatCurrencyAllocation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  firstColumn: {\r\n    position: \"sticky\",\r\n    left: 0,\r\n    background: \"white\",\r\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\"\r\n  },\r\n  cell: {\r\n    cursor: 'pointer',\r\n    \"&:hover\": {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.04)',\r\n    },\r\n    '&[aria-checked=\"true\"]': theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      }\r\n  },\r\n}));\r\n\r\nexport function BudgetRow(props: { category: string }) {\r\n  const category = props.category;\r\n  const classes = useStyles();\r\n\r\n  const months = getAllMonths().reverse();\r\n  const transactions = useSelector((state: any) => state.transactions) as Transaction[];\r\n  const [selectedMonth, setSelectedMonth] = useState<Date | null>(null);\r\n\r\n  const selectedTransactions = !selectedMonth ? [] : chain(transactions)\r\n    .filter(transaction => filterByDate(transaction, getOneMonthRange(selectedMonth)))\r\n    .filter(transaction => filterByCategory(transaction, category))\r\n    .sortBy(transaction => transaction.postedDate)\r\n    .reverse()\r\n    .value();\r\n\r\n  const handleCellClick = (month: Date) => {\r\n    if (selectedMonth !== null && isEqual(selectedMonth, month)) {\r\n      setSelectedMonth(null);\r\n    } else {\r\n      setSelectedMonth(month)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow>\r\n        <TableCell className={classes.firstColumn}>\r\n          {category}{hasAllocation(category) && (\r\n            <div><br/><span>{formatCurrencyRounded(getAllocation(category))}/month</span></div>\r\n          )}\r\n        </TableCell>\r\n        {months.map(month => (\r\n          <TableCell\r\n            key={month.getTime()}\r\n            aria-checked={!!(selectedMonth && isEqual(selectedMonth, month))}\r\n            className={classes.cell}\r\n            onClick={() => handleCellClick(month)}\r\n          >\r\n            {formatCurrencyRounded(getMonthTotal(transactions, category, month))}\r\n            {hasAllocation(category) && (\r\n              <div>\r\n                <br/><span>{formatCurrencyAllocation(getRemainingAllocation(transactions, category, month))}</span>\r\n              </div>\r\n            )}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={selectedMonth ? {} : {paddingBottom: 0, paddingTop: 0}} colSpan={13}>\r\n          <Collapse in={!!selectedMonth} timeout=\"auto\" unmountOnExit>\r\n            <TransactionsTable transactions={selectedTransactions}/>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import {Transaction} from \"../transactions/transactionModel\";\r\nimport {chain} from \"lodash\";\r\nimport {filterByCategory} from \"../transactions/filters/categoryFilter/filterByCategory\";\r\nimport {filterByDate} from \"../transactions/filters/dateFilter/filterByDate\";\r\nimport {getOneMonthRange} from \"./getOneMonthRange\";\r\n\r\nexport function getMonthTotal(transactions: Transaction[], category: string, month: Date): number {\r\n  const dateRange = getOneMonthRange(month);\r\n\r\n  return chain(transactions)\r\n    .filter(transaction => filterByCategory(transaction, category))\r\n    .filter(transaction => filterByDate(transaction, dateRange))\r\n    .sumBy(transaction => transaction.amount)\r\n    .valueOf();\r\n}\r\n","import React from \"react\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {makeStyles, TableCell} from \"@material-ui/core\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {format} from \"date-fns\";\r\nimport {budgetCategories} from \"../budgets/budget-categories\";\r\nimport {getAllMonths} from \"../budgets/getAllMonths\";\r\nimport {BudgetRow} from \"../budgets/BudgetRow\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  firstColumn: {\r\n    position: \"sticky\",\r\n    zIndex: 3,\r\n    borderRight: \"1px solid rgba(224, 224, 224, 1)\"\r\n  },\r\n}));\r\n\r\nexport function BudgetTab() {\r\n  const classes = useStyles();\r\n  const months = getAllMonths().reverse();\r\n\r\n  return (\r\n    <div>\r\n      <TableContainer component={Paper} style={{maxHeight: '850px'}}>\r\n        <Table stickyHeader>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.firstColumn}>Category</TableCell>\r\n              {months.map(month => (<TableCell key={month.getTime()}>{format(month, \"MMM yyyy\")}</TableCell>))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {budgetCategories.map(category => (<BudgetRow key={category} category={category}/>))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {chain} from 'lodash';\r\nimport {Transaction} from \"../transactions/transactionModel\";\r\nimport {filterByCategory} from \"../transactions/filters/categoryFilter/filterByCategory\";\r\nimport {TransactionsTable} from \"../transactions/TransactionsTable\";\r\n\r\nexport function InboxTab() {\r\n  const transactions = useSelector((state: any) => state.transactions) as Transaction[];\r\n  const filteredTransactions = chain(transactions)\r\n    .filter(transaction => filterByCategory(transaction, 'To be determined'))\r\n    .sortBy(transaction => transaction.postedDate)\r\n    .reverse()\r\n    .value();\r\n\r\n  return (\r\n    <div>\r\n      <TransactionsTable transactions={filteredTransactions}/>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {TransactionTab} from \"./TransactionTab\";\r\nimport {AppBar} from '@material-ui/core';\r\nimport {BudgetTab} from \"./BudgetTab\";\r\nimport {InboxTab} from \"./InboxTab\";\r\n\r\nexport function NavigationTabs() {\r\n  const [selectedTab, setSelectedTab] = React.useState(0);\r\n\r\n  const handleTabChanged = (event: React.ChangeEvent<{}>, newValue: any) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs value={selectedTab} onChange={handleTabChanged}>\r\n          <Tab label=\"Inbox\"/>\r\n          <Tab label=\"Transactions\"/>\r\n          <Tab label=\"Budgets\"/>\r\n        </Tabs>\r\n      </AppBar>\r\n      { selectedTab === 0 && ( <InboxTab/> )}\r\n      { selectedTab === 1 && ( <TransactionTab/> )}\r\n      { selectedTab === 2 && ( <BudgetTab/> )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {NavigationTabs} from \"./tabs/NavigationTabs\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavigationTabs/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {categoryFilterReducer} from \"../transactions/filters/categoryFilter/categoryFilterRedux\";\r\nimport {dateFilterReducer, dateRangeReducer} from \"../transactions/filters/dateFilter/dateFilterRedux\";\r\nimport {searchFilterReducer} from \"../transactions/filters/searchFilter/searchFilterRedux\";\r\n\r\nexport function rootReducer(state: any = {}, action: any) {\r\n  const count = state.count || 0;\r\n  const transactions = state.transactions || [];\r\n  return {\r\n    ...state,\r\n    count: (action.type === 'ADD_COUNT') ? count + 1 : count,\r\n    transactions: (action.type === 'FETCH_TRANSACTIONS_SUCCESS') ? action.payload : transactions,\r\n    categoryFilter: categoryFilterReducer(state, action),\r\n    dateFilter: dateFilterReducer(state, action),\r\n    dateRange: dateRangeReducer(state, action),\r\n    searchFilter: searchFilterReducer(state, action),\r\n  };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport {configureStore} from \"./redux/configureStore\";\nimport {fetchTransactions} from \"./redux/transactions/fetchTransactions\";\n\nconst store = configureStore();\nstore.dispatch(fetchTransactions());\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {rootReducer} from \"./rootReducer\";\r\n\r\nexport function configureStore() {\r\n  const composedEnhancers = composeWithDevTools(\r\n    applyMiddleware(\r\n      thunkMiddleware\r\n    )\r\n  );\r\n\r\n  return createStore(rootReducer, {}, composedEnhancers);\r\n}\r\n"],"sourceRoot":""}